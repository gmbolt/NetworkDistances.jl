var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = NetworkDistances","category":"page"},{"location":"#NetworkDistances","page":"Home","title":"NetworkDistances","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NetworkDistances.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [NetworkDistances]","category":"page"},{"location":"#NetworkDistances.Normalised","page":"Home","title":"NetworkDistances.Normalised","text":"Normalised distance obtained by applying Steinhaus transform to given distance. \n\nNote this will be a metric given d is a metric.\n\n\n\n\n\n","category":"type"},{"location":"#NetworkDistances.Precomputed","page":"Home","title":"NetworkDistances.Precomputed","text":"Distance which just looks-up a cache of stored distances.\n\n\n\n\n\n","category":"type"},{"location":"#NetworkDistances.diffusion_dist-Tuple{Matrix{Int64}, Matrix{Int64}, Any}","page":"Home","title":"NetworkDistances.diffusion_dist","text":"Compute the diffusion distance between two adjacency matrices with t the time of diffusion.\n\n\n\n\n\n","category":"method"},{"location":"#NetworkDistances.hamming_dist-Tuple{Matrix{Int64}, Matrix{Int64}}","page":"Home","title":"NetworkDistances.hamming_dist","text":"Compute the Hamming distance between two adjacency matrices (directed graphs)\n\n\n\n\n\n","category":"method"},{"location":"#NetworkDistances.jaccard_dist-Tuple{Matrix{Int64}, Matrix{Int64}}","page":"Home","title":"NetworkDistances.jaccard_dist","text":"Compute the Jaccard distance between two adjacency matrices (directed graphs)\n\n\n\n\n\n","category":"method"},{"location":"#NetworkDistances.pre_compute-Union{Tuple{T}, Tuple{Distances.SemiMetric, Vector{T}}} where T","page":"Home","title":"NetworkDistances.pre_compute","text":"Constructor method which takes distance + collection of values and makes a pre-computed distance.\n\n\n\n\n\n","category":"method"},{"location":"#NetworkDistances.progress_pairwise-Union{Tuple{T}, Tuple{Distances.SemiMetric, Vector{T}}} where T","page":"Home","title":"NetworkDistances.progress_pairwise","text":"Distance matrix calculation between elements of Vectors with progress bar.\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.pairwise!-Tuple{AbstractArray, Distances.Metric, Vector, Vector}","page":"Home","title":"StatsAPI.pairwise!","text":"In-place distance matrix calculation between elements of Vectors.\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.pairwise!-Tuple{AbstractMatrix, Distances.Metric, Vector, Vector}","page":"Home","title":"StatsAPI.pairwise!","text":"In-place distance matrix calculation between elements of Vectors. (For SubArray)\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.pairwise!-Tuple{SubArray, Distances.Metric, Vector, Vector}","page":"Home","title":"StatsAPI.pairwise!","text":"In-place distance matrix calculation between elements of Vectors. (For SubArray)\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.pairwise-Union{Tuple{T}, Tuple{Distances.SemiMetric, Vector{T}, Vector{T}}} where T","page":"Home","title":"StatsAPI.pairwise","text":"Distance matrix calculation between elements of Vectors. This is a custom extension of the function in the Distances.jl package to allow vectors of general type. The function in Distances.jl is designed for univariate/multivariate data and so takes as input either vectors or matrices (data points as rows).\n\n\n\n\n\n","category":"method"}]
}
